This part of the project involves the creation of a constraint-based weekly schedule for a specific
term at the university. Assume that the available time slots for each course are provided by the
lecturers. For example, a suitable plan for Professor Gokalp could be:
OGokalp.txt
CENG112; Thursday; 09:45
CENG632; Thursday; 13:30
Considering the preferred time slots for each course, your application should perform the
following tasks:
1. (20 pts) Use the strategy design pattern: The Strategy design pattern should be applied
when selecting the appropriate constraint for the time selection process.
2. (20 pts) Decorate the scheduling functionality: If you need to add extra functionality (such
as validation, logging, or additional constraints) to your scheduling objects dynamically, use
the Decorator pattern.
3. (20 pts) The Factory Method pattern is useful if you need to create different types of
schedules: If different scheduling requirements exist (e.g., for undergraduate vs. graduate
courses), you can have a ScheduleFactory that generates different schedule objects with
appropriate constraints.
NOTES:
● (10 pts) You should check the validity of user input.
● (10 pts) You should create a  HTML page to display the entire weekly
schedule table.
● (20 pts) You should draw Unified Modeling Language (UML) class diagrams for each class,
considering class interactions.
● You should create your Java project in Eclipse as SEDS519_Gx_HW2 and export as
SEDS519_Gx_HW2.zip.